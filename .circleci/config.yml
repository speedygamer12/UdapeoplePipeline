version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      tag:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend--${CIRCLE_WORKFLOW_ID:0:}
            aws cloudformation delete-stack --stack-name udapeople-frontend--${CIRCLE_WORKFLOW_ID:0:5}

defaults: &defaults
  docker:
    - image: circleci/node:13.8.0

orbs:
  slack: circleci/slack@4.1  

jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
        
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: 
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
        
  test-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: 
          keys: [backend-build]
      - run:
          name: Run Backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Audit frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Audit backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: udapeople-devops
        
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"   
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws --region us-east-1 \
              ec2 describe-instances \
              --filters \
              "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
              --output text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["db:1e:88:e7:91:5e:05:75:e0:81:cd:8a:43:bc:a0:e8"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar
            apk add --update gzip
            apk add --update ansible
            apk add --update openssh
      - run:
          name: Configure server
          command: |
            cat `.circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible && \
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 30m

  run-migrations:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/9k5UZZpjyaAp6V5VnbjE1w/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
    #  Here's where you will add some code to rollback on failure   

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      
      - run:
          name: Install dependencies
          command: |
            yum install -y tar
            yum install -y ansible 
            yum install -y python3           
            yum install -y node
            yum install -y npm
            yum install -y ansible            
            yum install -y awscli

      - attach_workspace:
          at: ~/

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws --region us-east-1 \
              ec2 describe-instances \
              --filters \
              "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
              --output text >> .circleci/ansible/inventory.txt)

            export API_URL="http://${BACKEND_IP}:3030" 
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      # Here's where you will add some code to rollback on failure  

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["db:1e:88:e7:91:5e:05:75:e0:81:cd:8a:43:bc:a0:e8"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar
            apk add --update gzip
            apk add --update ansible
            apk add --update openssh
            apk add --update nodejs npm
            apk add --update npm
            
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            ls
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  



workflows:

  my_work_flow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
          context: UDAPEOPLE_SLACK
      - scan-backend:
          requires: [build-backend]
          context: UDAPEOPLE_SLACK
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]

